model:
  arch: video_llama
  vit_model: "clip_vit_L"
  model_type: pretrain_vicuna
  freeze_vit: True
  freeze_qformer: False #True

  low_resource: False
  #use_cache: True
  use_grad_checkpoint: False # True

  # Q-Former
  num_query_token: 32

  # If you want train models based on LLaMA-2-chat,
  # some ckpts could be download from our provided huggingface repo
  # i.e.  https://huggingface.co/DAMO-NLP-SG/Video-LLaMA-2-13B-Finetuned
  llama_model: "/mnt/e/llms/oogabooga_model/vicuna-7bv1.1"
  imagebind_ckpt_path: "/mnt/g/videollama/imagebind/imagebind_huge.pth"

  # The ckpt of vision branch after stage1 pretrained, 
  #ckpt: "/mnt/g/videollama/Video-LLaMA-Series/finetune-vicuna7b-v2.pth"   # you can use our pretrained ckpt from https://huggingface.co/DAMO-NLP-SG/Video-LLaMA-2-13B-Pretrained/
  #ckpt: "/mnt/g/videollama_ckpts/output/videollama_stage2_finetune_instruct/20231203003/checkpoint_9.pth"
  #ckpt: '/mnt/g/videollama_ckpts/output/videollama_stage2_finetune/20231207011/checkpoint_9.pth'
  #ckpt: '/mnt/g/videollama_ckpts/output/videollama_stage2_finetune/20240104150/checkpoint_41.pth'
  #ckpt: "/mnt/g/videollama_ckpts/output/videollama_stage2_finetune_msrvtt/20240120204/checkpoint_96.pth"
  ckpt: "/mnt/h/videollama_ckpts/output/videollama_stage2_finetune_askyoutube_msrvtt_newdata_valley_no_kinetics_gpt4v_no_captions/20240422154/checkpoint_75.pth"


  # only train vision branch
  equip_audio_branch: False  # whether equips the audio branch
  frozen_llama_proj: False
  frozen_video_Qformer: False
  frozen_audio_Qformer: True
  
  fusion_head_layers: 2
  max_frame_pos: 32
  fusion_header_type: "seqTransf"
  max_txt_len: 320

  # vicuna and llama_2_chat use different template !!!

  # for llama_2_chat:
  # end_sym: "</s>"
  # prompt_path: "prompts/alignment_image.txt"
  # prompt_template: '[INST] <<SYS>>\n \n<</SYS>>\n\n{} [/INST] '

  # for vicuna:
  end_sym: "###"
  prompt_path: "prompts/alignment_image.txt"
  prompt_template: '###Human: {} ###Assistant: '

  # New
  use_clip_loss: True
  use_itm_loss: False
  use_generation_loss: False
  clip_dim_size: 1024
  

datasets:    
  askyoutube:
    data_type: video
    build_info:
      anno_dir: /mnt/g/video_caption_dataset/*/*/data/captions/
      videos_dir: /mnt/g/video_caption_dataset/*/*/data/chunked_videos_30s/
    vis_processor:
      train:
        name: "alpro_video_train"
        n_frms: 16
        image_size: 224
    text_processor:
      train:
        name: "blip_caption"
    num_video_query_token: 32
    sample_ratio: 10
    tokenizer_name: "/mnt/e/llms/oogabooga_model/vicuna-7bv1.1"
    model_type: "vicuna"  # need to set, as vicuna and llama_2_chat use different template
  webvid:
    data_type: video
    build_info:
      anno_dir: /mnt/f/videollama/datasets/webvid/results_2M_train_1/
      videos_dir: /mnt/f/videollama/datasets/webvid/data/videos
    vis_processor:
      train:
        name: "alpro_video_train"
        n_frms: 16
        image_size: 224
    text_processor:
      train:
        name: "blip_caption"
    num_video_query_token: 32
    sample_ratio: 33
    tokenizer_name: "/mnt/e/llms/oogabooga_model/vicuna-7bv1.1"
    model_type: "vicuna"  # need to set, as vicuna and llama_2_chat use different template
    #  kinetics:
    #    data_type: video
    #    build_info:
    #      anno_dir: /mnt/g/kinetics/k400/annotations/train.csv
    #      videos_dir: /mnt/g/kinetics/k400/train
    #    vis_processor:
    #      train:
    #        name: "alpro_video_train"
    #        n_frms: 16
    #        image_size: 224
    #    text_processor:
    #      train:
    #        name: "blip_caption"
    #    num_video_query_token: 32
    #    sample_ratio: 33
    #    tokenizer_name: "/mnt/e/llms/oogabooga_model/vicuna-7bv1.1"
    #    model_type: "vicuna"  # need to set, as vicuna and llama_2_chat use different template
  msrvtt:
    data_type: video
    build_info:
      anno_dir: /mnt/g/msrvtt/MSRVTT/MSRVTT/annotation/MSR_VTT.json
      videos_dir: /mnt/g/msrvtt/MSRVTT/MSRVTT/videos/all
    vis_processor:
      train:
        name: "alpro_video_train"
        n_frms: 16
        image_size: 224
    text_processor:
      train:
        name: "blip_caption"
    num_video_query_token: 32
    sample_ratio: 33
    tokenizer_name: "/mnt/e/llms/oogabooga_model/vicuna-7bv1.1"
    model_type: "vicuna"  # need to set, as vicuna and llama_2_chat use different template
  msvd:
    data_type: video
    build_info:
      anno_dir: /mnt/h/datasets/msvd/trainval_list.txt
      videos_dir: /mnt/h/datasets/msvd/videos/
    vis_processor:
      train:
        name: "alpro_video_train"
        n_frms: 16
        image_size: 224
    text_processor:
      train:
        name: "blip_caption"
    num_video_query_token: 32
    sample_ratio: 33
    tokenizer_name: "/mnt/e/llms/oogabooga_model/vicuna-7bv1.1"
    model_type: "vicuna"  # need to set, as vicuna and llama_2_chat use different template
  videochatgptcaptions:
    data_type: video
    build_info:
      anno_dir: "/mnt/g/video_chatgpt/Test_Human_Annotated_Captions"
      videos_dir: "/mnt/g/video_chatgpt/Test_Videos"
    vis_processor:
      train:
        name: "alpro_video_train"
        n_frms: 16
        image_size: 224
    text_processor:
      train:
        name: "blip_caption"
    num_video_query_token: 32
    sample_ratio: 33
    tokenizer_name: "/mnt/e/llms/oogabooga_model/vicuna-7bv1.1"
    model_type: "vicuna"  # need to set, as vicuna and llama_2_chat use different template


  valley:
    data_type: video
    build_info:
      anno_dir: "/mnt/h/datasets/valley/Valley-Instruct-73k/description_detailed_10k.json"
      videos_dir: "/mnt/h/datasets/valley/Valley-Instruct-73k/detailed_description_videos/"
    vis_processor:
      train:
        name: "alpro_video_train"
        n_frms: 16
        image_size: 224
    text_processor:
      train:
        name: "blip_caption"
    num_video_query_token: 32
    sample_ratio: 33
    tokenizer_name: "/mnt/e/llms/oogabooga_model/vicuna-7bv1.1"
    model_type: "vicuna"  # need to set, as vicuna and llama_2_chat use different template
    #  msvd:
    #data_type: video
    #build_info:
    #  anno_dir: /mnt/h/datasets/msvd/trainval_list.txt
    #  videos_dir: /mnt/h/datasets/msvd/videos/
    #vis_processor:
    #  train:
    #    name: "alpro_video_train"
    #    n_frms: 16
    #    image_size: 224
    #text_processor:
    #  train:
    #    name: "blip_caption"
    #num_video_query_token: 32
    #sample_ratio: 23
    #tokenizer_name: "/mnt/e/llms/oogabooga_model/vicuna-7bv1.1"
    #model_type: "vicuna"  # need to set, as vicuna and llama_2_chat use different template
 
run:
  task: video_text_pretrain
  # optimizer
  lr_sched: "linear_warmup_cosine_lr"
  init_lr: 3e-5
  min_lr: 1e-5
  warmup_lr: 1e-6

  weight_decay: 0.05
  max_epoch: 100
  iters_per_epoch: 1000
  batch_size_train: 16 #32
  batch_size_eval: 1
  num_workers: 8
  warmup_steps: 50 #1000

  seed: 42
  output_dir: "/mnt/h/videollama_ckpts/output/videollama_stage2_finetune_askyoutube_msrvtt_newdata_valley_no_kinetics_gpt4v_no_captions_videochatgpt_clipL"

  amp: True
  #resume_ckpt_path: "/mnt/g/videollama_ckpts/output/videollama_stage2_finetune_msrvtt_newdata/20240215002/checkpoint_50.pth"
  #resume_ckpt_path: "/home/bhavashok/Video-LLaMA/video_llama/output/videollama_stage2_finetune/20231112022/checkpoint_3.pth"
  #resume_ckpt_path: "/home/bhavashok/Video-LLaMA/video_llama/output/videollama_stage2_finetune/20231027044/checkpoint_4.pth"
  #resume_ckpt_path: "/home/bhavashok/Video-LLaMA/video_llama/output/videollama_stage2_finetune/20231023163/checkpoint_1.pth" #null
  #resume_ckpt_path: "/home/bhavashok/Video-LLaMA/video_llama/output/videollama_stage2_finetune/20231030154/checkpoint_2.pth"
  #resume_ckpt_path: "/home/bhavashok/Video-LLaMA/video_llama/output/videollama_stage2_finetune/20231117180/checkpoint_4.pth"
  #resume_ckpt_path: "/home/bhavashok/Video-LLaMA/video_llama/output/videollama_stage2_finetune/20231119001/checkpoint_2.pth"
  #resume_ckpt_path: "/home/bhavashok/Video-LLaMA/video_llama/output/videollama_stage2_finetune/20231122124/checkpoint_4.pth"
  #resume_ckpt_path: "/home/bhavashok/Video-LLaMA/video_llama/output/videollama_stage2_finetune/20231123014/checkpoint_6.pth"
  #resume_ckpt_path: "/mnt/g/videollama_ckpts/output/videollama_stage2_finetune/20231130031/checkpoint_2.pth"
  #resume_ckpt_path: '/mnt/g/videollama_ckpts/output/videollama_stage2_finetune/20231130105/checkpoint_9.pth'
  #resume_ckpt_path: '/mnt/g/videollama_ckpts/output/videollama_stage2_finetune/20231202003/checkpoint_8.pth'
  #resume_ckpt_path: "/mnt/g/videollama_ckpts/output/videollama_stage2_finetune/20231203144/checkpoint_7.pth"
  #resume_ckpt_path: "/mnt/g/videollama_ckpts/output/videollama_stage2_finetune/20231206211/checkpoint_1.pth"
  #resume_ckpt_path: "/mnt/g/videollama_ckpts/output/videollama_stage2_finetune/20231207145/checkpoint_0.pth"
  #resume_ckpt_path: "/mnt/g/videollama_ckpts/output/videollama_stage2_finetune_msrvtt/20240109163/checkpoint_31.pth"
  #resume_ckpt_path: '/mnt/g/videollama_ckpts/output/videollama_stage2_finetune_msrvtt/20240201115/checkpoint_63.pth'
  #resume_ckpt_path: '/mnt/g/videollama_ckpts/output/videollama_stage2_finetune_msrvtt_newdata_no_kinetics_askyoutube/20240222223/checkpoint_99_epch0.pth'
  #resume_ckpt_path: '/mnt/g/videollama_ckpts/output/videollama_stage2_finetune_askyoutube_msrvtt_newdata_no_kinetics/20240224184/checkpoint_41.pth'
  #resume_ckpt_path: '/mnt/g/videollama_ckpts/output/videollama_stage2_finetune_askyoutube_msrvtt_newdata_no_kinetics/20240226145/checkpoint_97_epoch0.pth'
  #resume_ckpt_path: '/mnt/g/videollama_ckpts/output/videollama_stage2_finetune_askyoutube_msrvtt_newdata_valley_no_kinetics/20240229030/checkpoint_1.pth'
  #resume_ckpt_path: '/mnt/g/videollama_ckpts/output/videollama_stage2_finetune_askyoutube_msrvtt_newdata_valley_no_kinetics_gpt4v_no_captions/20240312184/checkpoint_78.pth'
  #resume_ckpt_path: '/mnt/g/videollama_ckpts/output/videollama_stage2_finetune_askyoutube_msrvtt_newdata_valley_no_kinetics_gpt4v_no_captions/20240316161/checkpoint_13.pth'
  resume_ckpt_path: '/mnt/h/videollama_ckpts/output/videollama_stage2_finetune_askyoutube_msrvtt_newdata_valley_no_kinetics_gpt4v_no_captions_videochatgpt_clipL/20240501144/checkpoint_98.pth'


  evaluate: False 
  train_splits: ["train"]

  device: "cuda"
  world_size: 1
  dist_url: "env://"
  distributed: True
